@import "function";
@import "../common/var";

/* Break-points
 -------------------------- */
@mixin res($key, $map: $--breakpoints) {
    // 循环断点map，如果存在则返回
    @if map-has-key($map, $key) {
        @media only screen and (#{inspect(map-get($map, $key))}) {
            @content;
        }
    } @else {
        @warn "Undefeined points: `#{$map}`";
    }
}

/* Placeholder
 -------------------------- */
@mixin placeholder {
    &::-webkit-input-placeholder {
        @content;
    }

    &::-moz-placeholder {
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }
}

/* BEM -blo -ele -mod
 -------------------------- */
@mixin blo($block) {
    // !global 全局标志，必须在mixin使用才能生效
    $BLO: $namespace+'-'+$block !global;

    .#{$BLO} {
        @content;
    }
}

@mixin ele($element) {
    $ELE: $element !global;
    $selector: &;
    $currentSelector: "";
    @each $var in $element {
        $currentSelector: #{$currentSelector + "." + $BLO + $element-separator + $var + ","};
    }

    // & -- .test--success || .test.is-active || .test:after
    @if hitAllSpecialNestRule($selector) {
        @at-root {
            #{$selector} {
                #{$currentSelector} {
                    @content;
                }
            }
        }
    }@else {
        @at-root {
            #{$currentSelector} {
                @content;
            }
        }
    }
}

@mixin mod($modifier) {
    $selector: &;
    $currentSelector: "";
    @each $var in $modifier {
        $currentSelector: #{$currentSelector + & + $modifier-separator + $var + ","};
    }
    @at-root {
        #{$currentSelector} {
            @content;
        }
    }
}

@mixin config-mod($modifier, $ELEFLAG: false) {
    $selector: &;
    $interpolation: '';
    // __close
    @if $ELEFLAG {
        $interpolation: $element-separator + $ELEFLAG;
    }
    @at-root {
        #{$selector} {
            // .stc-alert__close--success
            .#{$B+$interpolation+$modifier-separator+$modifier} {
                @content;
            }
        }
    }
}

@mixin spec-selector($specSelector: '', $element: $ELE, $modifier: false, $block: $BLO) {
    $modifierCombo: '';
    // --success
    @if $modifier {
        $modifierCombo: $modifier-separator + $modifier;
    }
    @at-root {
        // .stc-alert__a.stc-alert__close--success
        #{&}#{$specSelector}.#{$block+$element-separator+$element+$modifierCombo} {
            @content;
        }
    }
}

@mixin meb($modifier: false, $element: $ELE, $block: $BLO) {
    $selector: &;
    $modifierCombo: '';
    // --success
    @if $modifier {
        $modifierCombo: $modifier-separator + $modifier;
    }
    @at-root {
        #{$selector} {
            .#{$block+$element-separator+$element+$modifierCombo} {
                @content;
            }
        }
    }
}

@mixin when($state) {
    @at-root {
        &.#{$state-prefix + $state} {
            @content;
        }
    }
}

@mixin extend-rule($name) {
    @extend #{'%shared-'+$name};
}

@mixin mixin-rule($name) {
    $rule-name: '%shared-'+$name;
  
    @at-root #{$rule-name} {
        @content;
    }
}

@mixin pseudo($pseudo) {
    @at-root #{&}#{':#{$pseudo}'} {
        @content;
    }
}