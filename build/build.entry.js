const components = require('../src/components.json');
const fs = require('fs');
const render = require('json-templater/string');
const uppercamelcase = require('uppercamelcase');
const path = require('path');
const endOfLine = require('os').EOL;

const OUTPUT_PATH = path.join(__dirname, '../src/index.js');
let importTemplate = 'import {{name}} from \'./core/packages/{{package}}/index.js\';';
let installComponentTemplate = '    {{name}}';
let mainTemplate = `/* Automatically generated by './build/build.entry.js' */

{{include}}
/* 其他需要引入的文件在这里引入，暂时还没有 */

const components = [
{{install}}
];

const install = function(Vue, opts = {}) {
    /* 需要注册的组件，指令，常量等在这里设置 */

    components.forEach(component => {
        Vue.component(component.name, component);
    });

    Vue.prototype.$STC = {
        size: opts.size || '',
        zIndex: opts.zIndex || 2000
    }
}

/* istanbul ignore if */
if(typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
}
export default {
    version: '{{version}}',
    install,
{{list}}
};
`;

let componentNames = Object.keys(components);

let includeComponentTemplate = [];
let installTemplate = [];
let listTemplate = [];

componentNames.forEach(name => {
    let componentName = uppercamelcase(name);
    includeComponentTemplate.push(render(importTemplate, {
        name: componentName,
        package: name
    }));

    if (['Loading'].indexOf(componentName) === -1) {
        installTemplate.push(render(installComponentTemplate, {
            name: componentName,
            component: name
        }));
    }
    if (componentName !== 'Loading') listTemplate.push(`    ${componentName}`);
})

let template = render(mainTemplate, {
    include: includeComponentTemplate.join(endOfLine),
    install: installTemplate.join(',' + endOfLine),
    version: process.env.VERSION || require('../package.json').version,
    list: listTemplate.join(',' + endOfLine)
})

fs.writeFileSync(OUTPUT_PATH, template);
console.log('[build entry] DOME:', OUTPUT_PATH);